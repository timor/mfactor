! -*- mode: factor -*-
USING: kernel ;
IN: memory

! memory access and information, also variables

! : getmem ( addr -- ) _get ;
! : getmem8 ( addr -- ) _getbyte ;
: getmem16 ( addr -- value ) [ getmem8 ] [ 1 + getmem8 8 asl ] bi bitor ;
! : setmem ( val addr -- ) _set ;
! : setmem8 ( val addr -- ) _setbyte ;

! apply q to value in memory and update memory location
: changemem ( addr q: ( old -- new ) -- )
    [ [ getmem ] keep ] dip ! oldval addr q
    dip                     ! newval addr
    setmem ;

! incf memory cell content
: +@ ( n addr -- ) [ + ] changemem ;

! memory pointers:
! MP: make-pointer for comma operations,
! lastname: last compiled name, used for setting flags (immediate, inline, recursive)
! : _MP ( -- MP ) memstart ;
: _get-MP ( -- MP ) 0 special> ;
: _set-MP ( val -- ) 0 >special ;
! reinitializes storage effectively invalidating all existing allocations
: _init-storage ( -- ) memstart _set-MP ;
! call quotation while setting MP to different address temporarily, restoring old value afterwards
: with-MP ( addr quot -- ) swap _get-MP [ _set-MP call ] dip _set-MP ;

! special variable, returns current segment base address
: _code-base ( -- n )
    5 special> ;

! compilation, forward
: b, ( byteval -- ) _get-MP [ setmem8 ] [ 1 + _set-MP ] bi ;
! ! compile short to mem, little endian
: s, ( short -- ) dup b, 8 neg shift b, ;
! compile cell
: , ( val -- ) cell [ dup b, 8 neg shift ] times drop ;

! count reaching 0 means all matched
: mem= ( a1 a2 n -- ? ) dup 0 = [ 3drop t ] [ -rot 2dup [ getmem8 ] bi@ = [ [ 1 + ] bi@ rot 1 - mem= ] [ 3drop f ] if ] if ;

! copy bytes
: memcpy8 ( dest src n -- )
    [ [ getmem8 swap setmem8 ] 2keep [ 1 + ] bi@ ] times 2drop ;
! copy words
: memcpy ( dest src n -- )
    [ [ getmem swap setmem ] 2keep [ 1 + ] bi@ ] times 2drop ;

! resolve base-relative reference, addr1 should already point to the address of the offset
: resolve-bref ( addr1 -- addr2 )
    getmem16 _code-base + ;

! resolve absolute reference, addr1 should already point to the address of the offset
: resolve-aref ( addr1 -- addr2 )
    getmem ;

! convert a sequence or string to its length and the address of the first element
! this relies on the internal representation of sequences, with a handle always pointing to
! the count byte before the data itself
: uncount ( countedstr -- addr len ) dup getmem8 [ 1 + ] dip ;
