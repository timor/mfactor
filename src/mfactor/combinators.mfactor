! -*- mode:factor -*-
USING: kernel ;
IN: combinators

! For simplicity reasons this does not follow the official factor syntax, instead the
! assocs are quotations with stack effect ( -- test action ).  Case succesively accesses
! these quotations and checks the test, executing the action if matched. assoc is
! therefore expected in the format:
!
!{ [ test1 [ action1 ] ] [ test2 [ action2 ] ] [ default-action ] }

! note that case is really supposed to be a macro, which expands into the corresponding
! if-else chain.  That will also make this workaround obsolete, and use the default
! syntax.

! assoc iteration helpers.  assoc fields are cell-width
: _assoc-first ( assoc -- item ) cell + ;
: _assoc-next ( item -- next-item ) cell + ;

! check if obj matches, call action if it does, return t in that case, otherwise don't do
! anything and return f
: case-step ( obj item: ( -- test action ) count -- obj next-item new-count ? )
    [
        [ call -rot = [ call t ] [ drop f ] if ] 2keep
        _assoc-next
    ] keep 1 - swap ;

: _case-final ( obj item -- ) nip call f ;

: case ( obj assoc -- )
    length [ _assoc-first ] dip
    [ dup 1 = if [ _case-final ] [ case-step ] ] loop
    3drop ;
