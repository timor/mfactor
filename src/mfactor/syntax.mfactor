!-*- mode: factor -*-
USING: kernel bcomp parser memory headers strings io vocabs ;
IN: syntax


! check if accumulator contains valid quotation, if yes, save to memory and return saved address
: >quotation ( acc -- addr ) [ oplit qend 0 ] dip 1 + _accum-quotation-size dup 255 > [ error ] [ dup _qhead, ] if _get-MP [ _stack2code ] dip ;

! helper
! copy token to memory since it will be overridden by following parsing
: _token2str ( token -- addr ) uncount dup _strhead, _get-MP [ [ dup getmem8 b, 1 + ] times drop ] dip 1 - ;
: read-token ( -- string ) token _token2str ;

! colon compiler
! read in name and quotation, compile to memory, create dictionary entry
SYNTAX: : ( -- ) read-token 0 ";" parse-until >quotation swap [ dup dict-find nip [ "re" print ] when "defining: " print print nl ] keep name ;

! accumulate bytes on stack (expensive, but hey)
: _readstr ( -- ..bytes num ) 0 [ receive dup 34 = [ drop f ] [ swap 1 + t ] if ] loop ;
! allocate memory and copy bytes, return address of count byte in header!
: _stack2string ( ..bytes num -- address )
    [ _strhead, ] keep ! .. bytes num
    _get-MP [ over + [ _set-MP ] keep
        [ [ -b, ] times ] with-MP ] keep 1 - ;
: _read-string-and-compile ( acc -- acc )
    _readstr _stack2string 5 suffix ;
SYNTAX: " ( acc -- acc" ) _read-string-and-compile ;
SYNTAX: B{ ( acc -- acc ) 0 "}" [ parsenum [ swap 1 + ] [ "not a byte literal: " print print error ] if ] scan-until-str _stack2string 5 suffix ;

: ] ( -- ) "unmatched ] " print error ;

! Read in quotation, return address and type.  Creates new accumulator, parses until
! quotation end, saves that accum to memory and adds a reference to that to the old accum
SYNTAX: [ ( acc -- acc ) 0 "]" parse-until >quotation 5 suffix ;

: ; ( -- ) "unexpected semicolon " print error ;

