!-*- mode: factor -*-
USING: kernel vocabs io strings ;
IN: parser

! "parse accumulator" on the stack
! acc in this context means reverse-vector on stack, consisting of
! item/type pairs and a count which always sits on top

! parse item types:
! 0: primitive (instruction code)
! 1: word call: base-relative (short jump)
! 2: word call: absolute (long jump)
! 3: integer literal
! 4: byte literal
! 5: inline quotation, or literal sequence
! 6: nop (TBR)

! add element to parsed stuff on stack, name taken from factor, but not completely correct
: suffix ( ..item/types count item type -- ..item/types item type newcount ) rot 1 + ;


! If string is a valid number literal, it is converted to a number, otherwise search for a
! word named by the string.

! parsing words have to have ( acc -- acc ) signature.
! try to find word named "string", or treat as number otherwise. also check if "string" denotes primitive
: parse-datum ( string  -- word/number type )
    dict-find [ dup definition prim? [ definition 0 ] [ 2 ] if ]
    [ parsenum [ 3 ] [ "parsing '" print print "' failed\! " print error ] if ] if ;

! : scan-datum ( -- item type ) token parse-datum ;

! That is the actual parsing step.  Check if string can be parsed as a word.
! If parsing word, execute immediately.
: parse-until-step ( acc string -- acc )
    parse-datum dup 2 = ! ( acc word/number type normal-word? )
    [ over parsing-word?
      [ drop execute ] [ [ definition ] dip suffix ] if ]
    [ suffix ] if ;

! Get a token, see if it is equal to end.  If not, parse the token.
: parse-until ( acc end -- acc )
    dup token [ str= ] keep swap ! ( acc end token ? )
    [ 2drop ]
    [ swap [ parse-until-step ] dip parse-until ] if ;

! loop until token matches str
: scan-until-str ( str quot: ( tok -- ) -- )  swap [ token swap 2dup str= [ drop f ] [ [ swap [ call ] keep ] dip t ] if ] loop 2drop ;

! comments
SYNTAX: \! ( -- ) [ receive 10 = [ f ] [ t ] if ] loop ;
! stack effects, also comments for now
SYNTAX: ( ( -- ) [ receive 41 = [ f ] [ t ] if ] loop ;
