# -*- org-babel-default-header-args:C: ((:noweb . "yes")); -*-
#+TITLE:     MFactor Documentation
#+EMAIL:     timor.dd@googlemail.com
#+DATE:      2015-03-17 Di
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS: timestamp:nil h:4 author:nil
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.pirilampo.org/styles/bigblow/css/htmlize.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.pirilampo.org/styles/bigblow/css/bigblow.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.pirilampo.org/styles/bigblow/css/hideshow.css"/>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/bigblow/js/jquery-1.11.0.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/bigblow/js/jquery-ui-1.10.2.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/bigblow/js/jquery.localscroll-min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/bigblow/js/jquery.scrollTo-1.4.3.1-min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/bigblow/js/jquery.zclip.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/bigblow/js/bigblow.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/bigblow/js/hideshow.js"></script>


#+STARTUP: indent
* Introduction
MFactor is a (partial) implementation of the [[http://factorcode.org/][factor language]] for embedded systems.
It consists of two parts:

1. A *host compiler*, written in Ruby, which is used with the [[https://github.com/ruby/rake][Rake]] build system to produce a
   binary image (see [[Host Compiler]]).

2. A *c implementation of a bytecode vm* which is able to execute such an image. (see [[VM Implementation]])


** General Concept
The general idea is as follows:
#+BEGIN_SRC ditaa :file img/concept.png
  +---------+
  |.mfactor +----+
  |source   |    |
  |files    |    |
  +---------+    |
                 v
        +-----------+       +---------------------+
        | rake task |       |vm implementation .c |
        |           |       |{d}                  |
        |           |       +---------------------+
        +-----------+                |
             |                       v
             v                +----------------+    +--------------+
      +--------------+        | regular        |    |c application |
      |bytecode image|------->| compilation    |<---|{d}           |
      |  {d}         |        |                |    +--------------+
      +--------------+        +----------------+
                                    |
                                    |
                    +--------+      |
                    |binary  |      |
                    |{d}     |<-----+
                    |        |
                    +--------+
#+END_SRC

A set of mfactor source files is translated by the host compiler (called through rake task
=mfactor=) into a bytecode image.  This bytecode image is then successively executed by
=interpeter()=, which is the actual VM implementation.  Since internally, all call
addresses are represented by 16-bit vlaues

In order to incorporate this into a project, several rake tasks are supplied in [[file:../tasks/mfactor.rake][tasks/mfactor.rake]]

- *mfactor*: the main task, which, when called, generates above code
- *mftest[word name]*: helper task, outputs a graphical representation of a specific word in the =generated= subdir.

** Configuring the Rake Task
The rake file is supposed to be included with rake's =import= facility.

Currently, it is configured via setting global variables:
- =MFACTOR_SRC_DIR=: determines the directory where the application's mfactor sources can be found
- =GENERATOR=: which bytecode backend to use, currently, only =Cortex= is supported
- =START_WORD=: word, which will be executed when starting the vm
- =MFACTOR_ROOT_VOCAB=: the root vocabulary, which is first loaded and loads all dependencies
- =MFACTOR_DEPENDING_OBJECTS=: To cause Rake to recompile the whole image, this
  should be set to the object files in the application which depend on the generated
  output. This usually means all files that use any of the words defined in
  =MFACTOR_C_WORDS=, as well as the object file that is built from =src/interpreter.c=
- =MFACTOR_C_WORDS=: Hashtable for exposing word locations in bytecode to C. Format:
  #+BEGIN_SRC ruby
      { "mfactor-word-name" => "NAME_OF_CPP_DEFINE" }
  #+END_SRC
- =FF_MFACTOR=: path to file containing interface definitions to c code (see [[*Making%20Existing%20C%20Functions%20Available][Making
  Existing C Functions Available]])
- =MFACTOR_IMAGE_SECTION=: a string describing the linker section that the bytecode-image
  will pe placed into
- =MFACTOR_DICT_SECTION=: same thing for the generated dictionary

** TODO Generated Output Files
In the application's main directory, a directory =generated= is created during the build
process, where several files are generated:

- =bytecode.c= :: main output from the ByteCodeImage class.
- =bytecode.h= :: consists of defines that =interpreter()= and maybe the user application
     needs to know about
- =image.dump= :: after translattion, the ByteCodeImage is written here using [[http://ruby-doc.org/core-2.2.3/Marshal.html][Marshal]].  It
     can be reloaded later in the build process with =ByteCodeImage.deserialize= to
     extract information about the image.

** Making Existing C Functions Available
Special global variable =FF_MFACTOR= can be set to a yaml file for
"importing" existing c functions into the interpreter's namespace (Foreign function interface).
entries are in the form of

#+BEGIN_SRC yaml
  <c_name>:
    name: "<mfactor-name>"
    call: <callspec>
    # following optional line is for void functions, for functions returning a value, don't use
    result: discard
#+END_SRC

  where =<callspec>= describes the function's arguments, e.g. "iis" for a function like =fn(int, int, int16)=.
  Currently supported values are:
  - =v= -> fn(void)
  - =lit= -> for variables (returns their address)
  - =s=, =i=, =b=, =bi=, =ib=, =is=, =ii=, =iis=, =iii= where =i= is =int=, =b= is =int8= and =s= is =int16=

** Invoking the Rake Task
If =MFACTOR_DEPENDING_OBJECT= was set correctly, then a rebuild of the application
automatically triggers a recompile of the bytecode image.

* Host Compiler

** Concept
The host compiler scans =MFACTOR_SRC_DIR= for the vocabulary specified with
=MFACTOR_ROOT_VOCAB=, and loads it.  It recursively loads any formerly unloaded
vocabularies in the process.  Loading a vocabulary involves following ruby classes:
#+BEGIN_SRC ditaa :file img/rbcomp.png

Parser -> Image -> ByteCodeImage

#+END_SRC

The Parser reads the source code, checking for syntax errors and generating an internal
representation of the code.  Once all the words have been loaded, the internal =Image=
object is turned into a =ByteCodeImage= object, which is the main output product.

** TODO Parser details
** Bytecode Generator Output
Per default, the output of the rake task is place in subdirectory =generated= of the
including project.  This folder contains several files:
- =inst_enum.h= - enum which contains all instruction mnemonics.  These are used in the
  image generated in =bytecode.c"
- =mfactor_words.h= - contains all exported words, which can then be referenced from C
  context.
- =bytecode.c= - contains the actual byte code image, dictionary and hash table
- =bytecode.h= - some constants which are generated during byte code compilation and
  used in the VM implementation
- =image.dump= - serialized MFactor::ByteCodeImage Object, can be loaded with
  =MFactor::ByteCodeImage::deserialize=.  This basically exposes all possible internals
  about the compiled image.  Used to extract information after compilation, when the
  =mfactor= task has finished.
** Details
*** Fried Quotations(WIP)
Fried Quotations (and their basic versions =curry= and =compose=) are the equivalent of
closures.  Creating a closure always means allocating space somewhere.  If the closure
creation is inlined, that space can be allocated by the compiler.  Therefore, fried
quotations are currently only supported on the host compiler, and all quotations
containing them are automatically inlined.  Also, if looping code is used to return
multiple results of fried quotation definitions, note that they will be equal to the last
invocation, since no allocation is performed at compile time.  In theory, a runtime check
could be implemented which signals a runtime error when a quotation is being fried more
than once.

To describe the transformation, consider the following example:
#+BEGIN_SRC factor
  ! for each i where i runs from 0 below n, x is added to it before applying quot to it
  : each-int-added ( n x quot ( i -- ) -- )
      '[ _ + @ ] each-integer; inline
#+END_SRC

Let's define a word that makes use of this word:
#+BEGIN_SRC factor
  ! print values that are passed to the quotation in each-int-added,
  ! the value added to each element is n, it is called 10 times
  : test ( n -- ) 10 swap [ . ] each-int-added ;
#+END_SRC

Conceptually, the following series of transformations is appplied internally when defining =test=:
=test ( n -- ) 10 swap [ . ] '[ _ + @ ] each-integer=
=test ( n -- ) 10 swap [ . ] '[ _ + _ call ] each-integer=
=test ( n -- ) 10 swap [ . ] 0x0002 setmem 0x0001 setmem [ (0x0001) + (0x0002) call ] each-integer=

The locations sites where the "curried-in" data is used are made explicit, and before the
quotation is passed to =each-integer=, code is generated that sets the actual memory
locations to their values at runtime.  This is done even when the values are constant and
known at compile time.

Since it is effectively rewriting the quotation at
runtime, this incurs a small performance hit.  That also illustrates why these words have
to be inlined.  For every use, the quotation must essentially be copied if the rewritten
items are to not interfere with different invocations.

the =@= specifier actually does no splicing, but simply calls the original quotation.
This must be kept in mind if the spliced quotation is mutable in any way.

If code is stored in non-writable memory, another indirection is needed.  The placeholders
are not substituted directly, but filled at runtime by a read to a known writable location:

=test ( n -- ) 10 swap 0x0001 setmem [ . ] 0x0002 setmem '[ 0x0001 getmem + 0x0002 getmem call ] each-integer=

This way, no actual code rewrite is performed, but the item use costs another indirection.
Effectively, this allocates "variables" in a data segment, which the compiler assumes to be writable
at runtime.

Note that both versions introduce the overhead of copying the code of the original
definition containing the fry at every call site!

An obvious optimization here is to separate the last part of the definition, after the
fried quotation, into an own word.  This is very probably almost always the case anyways,
as the example definition above illustrates that typically the quotation is passed to
another combinator.  If that one contains fried quotations, it will obviously further
increase the copied code overhead.

* VM Implementation
The VM is a [[http://en.wikipedia.org/wiki/Stack_machine][stack machine]] with three stacks, a *data stack* (or parameter stack, pstack),
*return stack* and a *retain stack*.

The data stack is used for argument passing, while the return stack is used to save the
program counter during sub-routines (and store some debug information).  The retain stack is only
used for putting stack items out of the way temporarily.

** Instruction Set
The Instruction Set for the VM is defined in [[file:instructionset.yml]].  For a description
of the instructions see ??? the relevant section later on.

** Definitions
:PROPERTIES:
:noweb-ref: vm_h
:END:
In [[file:src/interpreter.h]] are relevant data type definitions and preprocessor macro
defaults.  These are supposed to be overriden to configure the compiled runtime (see
???).

*** Typedefs

The type of actual primitive instructions which are loaded and evaluated, and from which
byte code images are constructed. (see ???)
Size: 1 byte
#+begin_src C
typedef unsigned char inst;
#+end_src

Targets of normal jumps and calls.  16 bit size, so if an image is bigger than 64K, these
are not sufficient (see ???call instructions)
Size: 2 bytes
#+begin_src C
  typedef unsigned short short_jump_target;  /* relative jumps in 64k on 32 bit */
#+end_src

Targets of long jumps. Use full 32 Bit address space.  Used for calls to addresses on
stack.
Size: 32 Bit
#+begin_src C
  typedef uintptr_t jump_target;  /* long absolute jump */
#+end_src

Type of data actually manipulated on the stack.
Size: 32 Bit
#+begin_src C
typedef uintptr_t cell;                 /* memory cell must at least hold pointer */
#+end_src

Type of entries in the dictionary.  These map names to addresses, and hold the flags that
mark a word inline, recursive, or a parsing word.
#+begin_src C
typedef struct dict_entry
{
	inst * address;					/* pointer into memory */
	unsigned char flags;		/* may include other flags later (inline, recursive, etc) */
	unsigned char name_header; /* should always be zero */
	unsigned char name_length;
	char name[];
}	__attribute__((packed)) dict_entry;
#+end_src

*** Preprocessor Macros

The following all indicate the size of the different components, in =cell= units

#+begin_src C
  /* data memory (affects non-transient data) in cells*/
  #ifndef VM_MEM
          #define VM_MEM 256
  #endif

  /* dictionary size (affects number of named items)*/
  #ifndef VM_DICT
          #define VM_DICT 512
  #endif

  /* parameter stack size (affects transient data)*/
  #ifndef VM_PSTACK
          #define VM_PSTACK 64
  #endif

  /* return stack size (affects nesting of functions)*/
  #ifndef VM_RETURNSTACK
          #define VM_RETURNSTACK 64
  #endif

  /* retain stack size (affects maximum amount of postponing data use) */
  #ifndef VM_RETAINSTACK
          #define VM_RETAINSTACK 32
  #endif
#+end_src

Another macro can be preset or computed: =INSTBASE=.  This is used to distinguish
primitive instructions from quotations, when executing words on the stack.  Primitives
cannot be interpreted as memory addresses, since these would point into invalid memory.

On Cortex-M, all memory addresses higher than 0x80... are not accessable, and can be
used for primitive instructions.
#+begin_src C
  #ifndef INSTBASE
   #if (__linux && __LP64__)
    #define INSTBASE 0x80U
   #elif (CORTEX_M)
    #define INSTBASE 0xA0U
   #else
    #error "don't know instruction code base for architecure!"
   #endif
  #endif
#+end_src

A =cell=-sized version for comparison to data values:

#+begin_src C
#define INSTBASE_CELL ((cell)INSTBASE<<(8*(sizeof(inst *)-sizeof(inst))))
#+end_src

*** Defines for the generated data in =bytecode.c=

#+begin_src C
extern inst image[];
extern dict_entry dict[VM_DICT];
extern uint16_t dict_hash_index[];
extern cell FF_Table[];
#+end_src

=image= holds the actual firmware image, =dict= is the dictioary, =dict_hash_index=
creates a hash table for fast lookup of words (see ???). =dict= is declared with size
because in the lookup function the =sizeof()= operator is used for bounds-checking.

*** Main VM Function Prototype
This is the prototype for the function that is supposed to be executed from the
application program.  The only argument is the offset of the first in the bytecode image
to be executed.  The return value indicates the status after a bytecode-program has been
executed.  If it is non-zero, an internal error happened.

#+begin_src C
int interpreter(short_jump_target);
#+end_src

** VM Implementation
:PROPERTIES:
:noweb-ref: vm_c
:END:
This section describes the actual C implementation of [[file:src/interpreter.c]].
*** Special Variables
The internal state of the interpreter is exposed to the application by predefining an
array of special variables.  These are needed for all instructions that depend on state
that must be influenced by the application.

First define an array that holds these Variables:

#+BEGIN_SRC C
  #define _NumSpecials 10
  static const unsigned char NumSpecials = _NumSpecials;
  static cell special_vars[_NumSpecials];
#+END_SRC

The list of currently implented specials:
#+BEGIN_SRC C
  /* currently implemented special variables
  0: MP - memory write pointer
  1: HANDLER - handler frame location in r(etain) stack (dynamic chain for catch frames)
  2: DEBUG_LEVEL - 0 to turn off, increasing will produce more verbose debug output
  3: RESTART - word where to restart when hard error occured
  4: STEP_HANDLER - address of handler which can be used for single stepping
  5: BASE - address of current 64k segment base
  6: OUTPUT_STREAM: 1: stdout, 2: stderr
  */
#+END_SRC

Not all og them are actually in use, the ones that are, are defined as macros so that the
=special_vars= array needs not be acccessed directly in the following source code:

**** =MP=: The Memory Write Pointer
This holds a pointer to the memory location that is accessed by the compilation primitives
(TOOD: link)
#+BEGIN_SRC C
  #define MP special_vars[0]
#+END_SRC

**** =HANDLER=: Current Exception handling frame
This is used by the application to store information about the current exception handler.
Note that the application does not currently manipulate or access this state, so it is
basically a specialized global variable. TODO: reference the exception handling lib
#+BEGIN_SRC C
  #define HANDLER special_vars[1]
#+END_SRC

**** =DEBUG_LEVEL=: VM Debug Verbosity
Used to activate debug output for VM internals.  Only used for VM development and debugging.
#+BEGIN_SRC C
  #define DEBUG_LEVEL special_vars[2]
#+END_SRC

**** =RESTART=: Restart address (deprecated)
This used to hold an address that was jumped to in case of internal errors.  This has been
replaced by returning from =interpreter()= with the internal error code, and the host
application deciding what to do then

**** =STEP_HANDLER=: Single Stepping Handler (not in use)
This shall hold an address which is called on every step of the currently executed bytecode
image.  Meant for implementing single step debugging, where the actual handler would be
written as mfactor source.

**** =BASE=: Current Segment base address
This hold the address that is added to *all* internal calls (TODO: link to relevant call
primitives).  Usually it holds the address of the =image=-variable, that is generated in
=generated/bytecode.c=.  This allows the image to be relocatable, so that the actuall call
target (16 bit value)
** Complete Source Files
*** interpreter.h
#+name: interpreter_h
#+begin_src C :tangle ../src/interpreter.h
#ifndef INTERPRETER_H
#define INTERPRETER_H

#include <stdbool.h>
#include <stdint.h>
#include "generated/bytecode.h"

<<vm_h>>

#endif

#+end_src
*** interpreter.c
#+name: interpreter_c
#+BEGIN_SRC C :tangle ../src/interpreter.wip.c
  #include "interpreter.h"
  #include "reader.h"
  #include <string.h>
  #include <stddef.h>
  #include <stdio.h>
  #include <stdbool.h>

  /* these are available after mfactor task has run */
  #include "generated/bytecode.h"
  #include "generated/inst_enum.h"

  /* target specific stuff */
  #include "runtime.h"
  #include "reset_system.h"

  #include "seq_headers.h"

  <<vm_c>>

#+END_SRC
