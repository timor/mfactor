# duplicate top element on stack
_dup: "dup"
eql: "="
gt: ">"
lt: "<"
# drop top element of stack
drop:
zero: "0"
one: "1"
two: "2"
add: "+"
mul: "*"
# negate
neg:
sub: "-"
# arithmetic shift left
asl:
# arithmetic shift right
asr:
div: "/"
mod:
# bitwise operations
bitand:
bitor:
bitxor:
bitnot:
# emit one byte as character on stdout
emit:
# read one byte from stdin
# ( -- byte )
receive:
# push from parameter to retain stack
to_r: ">r"
# pop from retain to parameter stack
r_from: "r>"
# literal word
lit: :private
# literal byte
litb: :private
# literal instruction
oplit: :private
# literal base-relative quotation (short)
blitq: :private
# start of inline quotation
qstart: :private
# end of inline quotation
qend: :private
# start of inline array
astart: :private
# inline byte arrays
bastart: :private
# end of inline array (TBR)
aend: :private
# inline strings [ char.. strend ] ( -- str len )
strstart: :private
strend: :private
# decision primitive, only keep one value based on condition
# ( cond true false -- true/false )
truefalse: "?"
# call absolute address on stack
scall: "call"
# call absolute address on stack (tail call)
stcall: :private
# used to refer to non-quotation data
ref: :private
# swap two top elements on stack
swap:
# get next token (parsing primitive)
# ( -- string length )
token:
# find a token by name in the dictionary
# ( countedstring -- dictentry/name found? )
search:
# memory bounds
# code + data mem
memstart:
memend:
# dictionary mem
dictstart: "dict-start"
dictend: :private
# size of one cell
cellsize: "cell"
# start of instruction codes
instbase:
# quit interpreter
quit:
# show current stack contents
stack_show: "st"
# try to parse string on top of stack as number
# ( str -- num/str success? )
parsenum:
nop:
# ( -- data-start data-end mem-start mem-end )
memrange:
# unsafe memory operations
# (value address -- )
_set: :private
_setbyte: :private
# (address -- value)
_get: :private
_getbyte: :private
# prettywrite ( value -- )
_pwrite: "pwrite"
pwritex:
# call quotation in code (absolute)
acall: :private
# call quotation in code (absolute, tail call)
atcall: :private
# call quotation in code (relative to base address, short)
bcall: :private
# tail call quotation in code (relative to base address, short)
btcall: :private
# clear parameter stack
clear:
# number of items on stack
psplevel:
# error (without message)
error:
# start timer ( -- )
tstart:
# end timer ( -- usecs secs )
tend:
# turn off tail calling ( -- )
notail:
# turn on tail calling ( -- )
tail:
# system reset (maybe nop or quit on hosts)
reset:
# getting an address from the foreign-function lut ( i -- addr )
ff: :private
# c function calling primitives
# call with one int
ccall_i:
# call with byte and int TODO: check if calling convention is same as ii
ccall_bi:
# call with two ints and 1 short
ccall_iis:
# call with three ints
ccall_iii:
# call with nothing
ccall_v:
