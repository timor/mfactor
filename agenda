- DONE name table
- DONE name lookup
- DONE basic repl
- DONE proper tail calls
- DONE add primitives for allocating stuff in data mem
- DONE add allocating stuff in dictionary
- DONE untangle build system
- DONE sequence allocation
  - DONE: current scheme of directly increasing DP doesnt support
    nesting, replace with atomic allocation after read
- DONE: dictionary extension, DEFERRED: namestack
- DONE: apply counted strings to token reader
- DONE: reader nesting, involves making parsing explicit
- DONE: > remove dict entries and substitute with offset number from known ff-pointer array
    to allow for quick runtime word lookup (constant time)
- DONE: revamp ruby compiler, with dictionary support and syntax error reporting
- DONE: implement new literals
- DONE: compilation to graphs, inline recursive words not working yet
- DONE: inlining tail recursive combinators
- DONE: remove memory read and write asserts for now to enable better testing
- DONE: rename trace-level to debug-level and implement as special var
- DONE: put vocabulary lookup into user space
- DONE: store length of inline quotations as first element, so one can handle it like "litc"
- DONE: implement `case`.  implemented as macro only
- DONE: implement symbols (SYMBOL:) and define some basic error conditions with them
- rename `stdlib_size.h`, since there are more constants than size
- rename all "stdlib" to "mfactor"
- substitute debug mode with single stepping handler
- change string reading and quotation accumulation to use memory instead of stack
- split code into platform dependent and platform independent parts
- demote ruby vocab loader to bootstrapping, switching to
  parsing primitives after base system is loaded.  This might incur a
  performance hit, depending on how Parslet's performance compares to
  forward parsing using generated image.
- get rid of phi functions in generated cdfg (either only in output,
  or don't generate phis at all, depending on difficulty of variable naming)
- ensure that mutual tail-recursive combinators work
- support non-tail-recursive combinators (involves generating an
  "anonymous" function for every usage of the combinator), also
  support no-inlining of combinators when stack effects are given
- stopworld compacting precise mark-sweep gc (should only be triggered during user input,
  so not time critical)

