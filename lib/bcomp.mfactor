!-*- mode: factor -*-
USING: kernel memory math io ;
IN: bcomp

! byte code compiler functions

! compilation, reverse
: -b, ( byteval -- ) _MP [ 1 neg swap +@ ] [ getmem setmem8 ] bi ;
! ! compile short to mem, little endian
: -s, ( short -- ) dup 8 neg shift -b, -b, ;
! compile cell
: -, ( val -- ) cell [ cell 1 - neg + 8 * over swap shift -b, ] each-integer drop ;

! take an item/type pair from the parser accumulator, compile the correct quotation element
! for type information, see parser vocabulary
! TODO: user ref instructions!
: _-q, ( item type -- ) dup 0 = [ drop _inst -b, ]
    [ dup 1 = [ drop -s, oplit bcall _inst -b, ]
      [ dup 2 = [ drop -, oplit acall _inst -b, ]
        [ dup [ 3 = ] [ 5 = ] bi or [ drop -, oplit liti _inst -b, ]
          [ 6 = [ drop ] [ "compilation for item unknown" print error ] if ] if ] if ] if ] if ;

! compile parser accumulator to memory
: _stack2code ( acc -- ) _MP getmem + [ _MP setmem ] keep [ [ _-q, ] times ] with-MP ;

! return size of word when stored in quotation
: _wordsize ( type -- size ) dup 0 = [ drop 1 ]
    [ dup 1 = [ drop 3 ]
      [ dup [ 2 = ] [ 5 = ] bi or [ drop cell 1 + ]
        [ dup 3 = [ drop cell 1 + ]
          [ dup 4 = [ drop 2 ]
            [ 6 = [ 0 ] [ "size for item unknown" print error 0 ] if ] if ] if ] if ] if ] if ;

! determine size of quotation accumulated, careful: not tail recursive, return stack must be able to hold number of elements, retain stack must hold twice the number of elements in accumulator
! reminder: acc === .. item type n
: _accum-quotation-size-worker ( acc x -- acc x ) over 0 = not [ pick _wordsize + rot >r rot >r [ 1 - ] dip _accum-quotation-size-worker [ 1 + ] dip r> -rot r> -rot ] when ;
: _accum-quotation-size ( acc -- acc x ) 0 _accum-quotation-size-worker ;
