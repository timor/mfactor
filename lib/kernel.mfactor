!-*- mode: factor -*-
USING: ;
IN: kernel

: nip ( x y -- y ) swap drop ;
: 2nip ( x y z -- z ) >r drop drop r> ;
: dip ( x quot -- x ) swap >r call r> ;
: 2dip ( x y quot -- x y ) swap [ dip ] dip ;
: 3dip ( x y z quot -- x y z ) swap [ 2dip ] dip ;
: dupd ( x y -- x x y ) >r dup r> ;
: over ( x y -- x y x ) dupd swap ;
: pick ( x y z -- x y z x ) >r over r> swap ;
: 2over ( x y z -- x y z x y ) pick pick ;
: 2dup ( a b  -- a b a b ) over over ;
: 3dup ( x y z -- x y z x y z ) pick pick pick ;
: 2drop ( a b -- ) drop drop ;
: 3drop ( x y z -- ) drop drop drop ;
: keep ( ..a x quot: ( ..a x -- ..b ) -- ..b x ) over [ call ] dip ;
: 2keep ( ..a x y quot: ( ..a x y -- ..b ) -- ..b x y ) [ 2dup ] dip 2dip ;
: 3keep ( ..a x y z quot: ( ..a x y z -- ..b ) -- ..b x y z ) [ 3dup ] dip 3dip ;
: bi ( x p q -- ) [ keep ] dip call ;
: tri ( x p q r -- ) [ [ keep ] dip keep ] dip call ;
: bi* ( x y p q -- ) [ dip ] dip call ;
: bi@ ( x y quot -- ) dup bi* ;
: 2bi ( x y  p q -- ) [ 2keep ] dip call ;
! deprecated ones
: rot ( x y z -- y z x ) >r swap r> swap ;
: -rot ( x y z -- z x y ) swap >r swap r> ;
: spin ( x y z -- z y x ) swap rot ;
: tuck ( x y -- y x y ) swap over ;
! mine
: 2swap ( a b x y -- x y a b ) [ -rot ] dip -rot ;

! control flow
: if ( cond true false -- true/false ) ? call ;
: when ( ..a ? true: ( ..a -- ..a ) -- ..a ) [ nop ] if ;
: unless ( ..a ? false: ( ..a -- ..a ) -- ..a ) [ nop ] swap if ;

! call pred until it returns f
: loop ( ... pred: ( ... -- ... ? ) -- ... ) dup >r call [ r> loop ] [ r> drop ] if ;
: times ( ... n quot: ( ... -- ... ) -- ... ) swap dup 0 = [ 2drop ] [ [ [ call ] keep ] dip 1 - swap times ] if ;
: do ( pred body -- pred body ) dup 2dip ;
: while ( ..a pred: ( ..a -- ..b ? ) body: ( ..b -- ..a ) -- ..b )
    over [ call ] 2dip rot [ over [ call ] 2dip while ] [ 2drop ] if ;
: until ( ..a pred: ( ..a -- ..b ? ) body: ( ..b -- ..a ) -- ..b )
    over [ call ] 2dip rot [ 2drop ] [ over [ call ] 2dip until ] if ;

: shift ( x n -- y ) dup 0 > [ asl ] [ neg asr ] if ;

! basic arithmetic and logic operations

: t ( -- t ) 1 ;
: f ( -- f ) 0 ;

: >= ( n1 n2 -- ? ) 2dup > [ 2drop t ] [ = ] if ;

: and ( obj1 obj2 -- ? ) over ? ;
: or ( obj1 obj2 -- - ) dupd ? ;
: not ( ? -- \? ) 0 1 ? ;

! start inclusive, end exclusive
: in-range ( val start end -- ? ) [ over [ >= ] dip ] dip < and ;

! convert tos to inst
: _inst ( inst -- ) cell 1 - 8 * neg shift 0xff bitand ;
: prim? ( address -- ? ) _inst instbase >= ;

: most ( x y quot -- z ) 2keep ? ;
