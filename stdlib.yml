# top ( .. )
top: [ :bcall, :_init_storage, :btcall, :listener ]
# top: [ :btcall, :listener ]

# listener ( -- )
listener: [ :bcall, :prompt, :token, :find, :oplit, :scall, :blitq, :unknown-token, :bcall, :if, :btcall, :listener ]

# ( obj1 obj2 -- ? )
and: [ :bcall, :over, :truefalse ]

# ( obj1 obj2 -- ? )
or: [ :bcall, :dupd, :truefalse ]

# ( n1 n2 -- ? )
# 2dup > [ 2drop t ] [ = ] if
">=": [ :bcall, :over, :bcall, :over, :gt, :qstart, :drop, :drop, :btcall, :t, :qend, :oplit, :eql, :btcall, :if ]

# test if value is in range, including start but excluding stop
# ( val start end -- ? )
# [ over [ >= ] dip ] dip < and
in-range: [ :qstart, :bcall, :over, :blitq, :">=", :btcall, :dip, :qend, :bcall, :dip, :lt, :btcall, :and ]

# safe memory set
# ( value address -- )
# [ dup memrange [ 2drop ] 2dip in-range [ _set ] [ 2drop f ] if ]
set: [ :dup, :memrange, :qstart, :drop, :drop, :qend, :bcall, :2dip, :bcall, :in-range, :oplit, :_set, :qstart, :drop, :drop, :btcall, :f, :qend, :btcall, :if ]

# safe memory get
# ( address -- )
# [ dup memrange 2drop in-range [ _get ] [ 2drop f ] if ]
get: [ :dup, :memrange, :drop, :drop, :bcall, :in-range, :oplit, :_get, :qstart, :drop, :drop, :btcall, :f, :qend, :btcall, :if ]


# set the first word in memory as the memory write pointer (_MP)
# ( -- )
_init_storage: [ :memstart, :dup, :cellsize, :add, :swap, :btcall, :set ]

# next free memory address ( -- _MP)
_MP: [ :memstart, :btcall, :get ]

# ( dest src size -- )
# memcpy: [ 

# (prompt) ( -- )
prompt: [ :psplevel, :pwrite, :litb, '>', :emit, :litb, ' ', :emit ]

# ( x -- x^2 )
square: [ :dup, :mul ]

# ( cond true false -- [effect] )
if: [ :truefalse, :stcall ]

# ( input -- )
bad-input: [ :drop, :litb, "\n", :litb, 'X', :dup, :litb, '_', :swap, :emit, :emit, :emit, :emit ]

# ( x y -- y )
nip: [ :swap, :drop ]

# ( x quot -- x)
dip: [ :swap, :to_r, :scall, :r_from ]

# ( x y quot -- x y )
2dip: [ :swap, :blitq, :dip, :btcall, :dip ]

# ( x y -- x x y )
dupd: [ :to_r, :dup, :r_from ]

# ( x y z -- )
3drop: [ :drop, :drop, :drop ]

# ( x y -- x y x )
over: [ :bcall, :dupd, :swap ]

# ( ..a x quot: ( ..a x -- ..b ) -- ..b x )
keep: [ :bcall, :over, :oplit, :scall, :btcall, :dip ]

# [ 2dup ] dip 2dip
2keep: [ :qstart, :bcall, :over, :bcall, :over, :qend, :bcall, :dip, :btcall, :2dip ]

# ( x p q -- )
# [ keep ] dip call
bi: [ :blitq, :keep, :bcall, :dip, :stcall ]

# tri ( x p q r -- )
# [ [ keep ] dip keep ] dip call
tri: [ :qstart, :blitq, :keep, :bcall, :dip, :btcall, :keep, :qend, :bcall, :dip, :stcall ]

# ( pred quot -- pred quot )
do: [ :dup, :btcall, :2dip ]

# ( quot:( -- ? ) -- [effect] )
# stops when ? is false
loop: [ :dup, :scall, :blitq, :loop, :qstart, :drop, :qend, :btcall, :if ]

# ( n quot -- )
# swap dup 0 = [ 2drop ] [ [ [ call ] keep ] dip 1 - swap times ] if
# TODO maybe rewrite using loop and composition/currying
times: [ :swap, :dup, :litb, 0, :eql, :blitq, :drop, :drop, :qstart, :qstart, :oplit, :scall, :bcall, :keep, :qend, :bcall, :dip, :litb, 1, :sub, :swap, :btcall, :times, :qend, :btcall, :if ]

# ( -- quot )
"\\": [ :token, :find, :oplit, :nop, :blitq, :bad-input, :btcall, :if ]

# ( q1 q2 -- q1q2 )
compose: [ ]

# ( pred:( ..a -- ..b ?) body:( ..b -- ..a) -- ..b)
while: [ :bcall, :over, :scall, :qstart, :qend, :qstart, :qend, :btcall, :if ]
':': [ ]

# ( tok -- )
unknown-token: [ :parsenum, :oplit, :nop, :blitq, :bad-input, :btcall, :if ]

.: [ :pwrite, :litb, "\n", :emit ]

# ( -- next_free_name )

t: [ :litb, 1 ]
f: [ :litb, 0 ]

testloop: [ :qstart, :litb, "!", :emit, :btcall, :t, :qend, :btcall, :loop ]
