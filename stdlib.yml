# toplevel ( -- )
toplevel: [ :bcall, :prompt, :token, :find, :oplit, :scall, :blitq, :unknown-token, :bcall, :if, :btcall, :toplevel ]

# (prompt) ( -- )
prompt: [ :psplevel, :pwrite, :litb, '>', :emit, :litb, ' ', :emit ]

# ( x -- x^2 )
square: [ :dup, :mul ]

# ( cond true false -- [effect] )
if: [ :truefalse, :stcall ]

# ( input -- )
bad-input: [ :drop, :litb, "\n", :litb, 'X', :dup, :litb, '_', :swap, :emit, :emit, :emit, :emit ]

# ( x y -- y )
nip: [ :swap, :drop ]

# ( x quot -- x)
dip: [ :swap, :to_r, :scall, :r_from ]

# ( x y -- x y x )
over: [ :swap, :dup, :to_r, :swap, :r_from ]

# ( quot:( -- ? ) -- [effect] )
# stops when ? is false
loop: [ :dup, :scall, :blitq, :loop, :qstart, :drop, :qend, :btcall, :if ]

# ( x y quot -- x y )
2dip: [ :swap, :blitq, :dip, :btcall, :dip ]

# ( -- quot )
'\': [ :token, :find, :oplit, :nop, :blitq, :bad-input, :btcall, :if ]

# ( pred:( ..a -- ..b ?) body:( ..b -- ..a) -- ..b)
while: [ :bcall, :over, :scall, :qstart, :qend, :qstart, :qend, :btcall, :if  ]
':': [ ]

# ( tok -- )
unknown-token: [ :parsenum, :oplit, :nop, :blitq, :bad-input, :btcall, :if ]

.: [ :pwrite, :litb, "\n", :emit ]

# ( -- next_free_name )

t: [ :litb, 1 ]
f: [ :litb, 0 ]

testloop: [ :qstart, :litb, "!", :emit, :btcall, :t, :qend, :btcall, :loop ]
